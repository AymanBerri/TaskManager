@page
@model TaskManager.Pages.ManageTasks
@{
    ViewData["Title"] = "ManageTasks";
}


<h2>Manage Tasks</h2>

<!-- Task List -->
<table class="table">
    <thead>
        <tr>
            <th>Task Name</th>
            <th>Status</th>
            <th>Description</th>  
            <th>Due Date</th>     
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="task-list">
        <!-- Task list will be dynamically populated here -->
    </tbody>
</table>

<!-- Add New Task Form -->
<h3 id="form-header">Add New Task</h3> <!-- Updated to dynamically change -->
<form id="task-form">
    <div class="mb-3">
        <label for="task-title" class="form-label">Task</label>
        <input type="text" id="task-title" class="form-control" required />
    </div>
    <div class="mb-3">
        <label for="task-description" class="form-label">Task Description</label>
        <textarea id="task-description" class="form-control"></textarea>
    </div>
    <div class="mb-3">
        <label for="task-due-date" class="form-label">Due Date</label>
        <input type="date" id="task-due-date" class="form-control" />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Add Task</button> <!-- Updated to dynamically change -->
    </div>
</form>



<script>
    // Fetch tasks from the API
    function fetchTasks() {
        fetch('/api/tasks')
            .then(response => response.json())
            .then(tasks => {
                const taskList = document.getElementById('task-list');
                taskList.innerHTML = '';  // Clear the list before adding new items
                tasks.forEach(task => {


                    // Format the due date
                    const dueDate = new Date(task.dueDate);
                    const formattedDate = dueDate.toISOString().split('T')[0];


                    taskList.innerHTML += `
                        <tr>
                            <td>${task.title}</td>
                            <td>${task.completed ? 'Completed' : 'Pending'}</td>
                            <td>${task.description}</td>  
                            <td>${formattedDate}</td>      
                            <td>
                                <button class="btn btn-warning btn-sm" onclick="editTask(${task.id})">Edit</button>
                                <button class="btn btn-danger btn-sm" onclick="deleteTask(${task.id})">Delete</button>
                            </td>
                        </tr>
                    `;
                });
            });
    }


    // Add/Edit Task
    let editingTaskId = null; // To track if a task is being edited
    document.getElementById('task-form').addEventListener('submit', function (e) {
        e.preventDefault();

        const taskData = {
            title: document.getElementById('task-title').value,
            description: document.getElementById('task-description').value,
            dueDate: document.getElementById('task-due-date').value,
            completed: false
        };

        if (editingTaskId) {
            taskData.id = editingTaskId;

            // If editing, update the existing task
            fetch(`/api/tasks/${editingTaskId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(taskData)
            })
            .then(() => {
                fetchTasks();  // Reload tasks
                resetForm();   // Reset the form for adding new tasks
            });




        } else {
            // Add a new task
            fetch('/api/tasks', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(taskData) })
            .then(() => {
                fetchTasks();  // Reload tasks
                resetForm();   // Reset the form
            });
        }
    });



    //-- called when WE click the edited button,-- this populates the form with the taskData and sets the variable

    function editTask(id) {
        fetch(`/api/tasks/${id}`)
            .then(response => response.json())
            .then(task => {
                // Format the due date
                const dueDate = new Date(task.dueDate);
                const formattedDate = dueDate.toISOString().split('T')[0];

                // Populate the form
                document.getElementById('task-title').value = task.title;
                document.getElementById('task-description').value = task.description;
                document.getElementById('task-due-date').value = formattedDate;

                // Change form header and button text
                document.getElementById('form-header').textContent = 'Edit Task';
                document.querySelector('button[type="submit"]').textContent = 'Update Task';

                // Store the task ID for later use in the submit handler
                editingTaskId = id;
            });
    }


    // Delete task
    function deleteTask(id) {
        fetch(`/api/tasks/${id}`, {
            method: 'DELETE'
        })
        .then(() => {
            fetchTasks();  // Reload tasks
        });
    }


    // Resetting the form values
    function resetForm() {
        document.getElementById('task-title').value = '';
        document.getElementById('task-description').value = '';
        document.getElementById('task-due-date').value = '';
        document.getElementById('form-header').textContent = 'Add New Task';
        document.querySelector('button[type="submit"]').textContent = 'Add Task';
        editingTaskId = null;  // Clear the task being edited
    }
    // Initial task list fetch
    fetchTasks();
</script>
@page
@model TaskManager.Pages.ManageTasks
@{
    ViewData["Title"] = "ManageTasks";
}


<div class="container my-5">
    <h2 class="text-center mb-4">Manage Tasks</h2>

    <!-- Task List -->
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Task Name</th>
                <th scope="col">Status</th>
                <th scope="col">Description</th>  
                <th scope="col">Due Date</th>     
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody id="task-list">
            <!-- Task list will be dynamically populated here -->
        </tbody>
    </table>

    <!-- Add/Edit Task Form -->
    <div class="card mt-5">
        <div class="card-header">
            <h3 id="form-header">Add New Task</h3>
        </div>
        <div class="card-body">
            <form id="task-form">
                <div class="form-group">
                    <label for="task-title">Task</label>
                    <input type="text" id="task-title" class="form-control" placeholder="Enter task title" required />
                </div>
                <div class="form-group">
                    <label for="task-description">Task Description</label>
                    <textarea id="task-description" class="form-control" rows="3" placeholder="Enter task description"></textarea>
                </div>
                <div class="form-group">
                    <label for="task-status">Task Status</label>
                    <select id="task-status" class="form-control">
                        <option value=0>Pending</option>
                        <option value=1>In Progress</option>
                        <option value=2>Completed</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-due-date">Due Date</label>
                    <input type="date" id="task-due-date" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary btn-block mt-3">Add Task</button>
            </form>
        </div>
    </div>
</div>



<script>
    // Fetch tasks from the API
   
    function fetchTasks() {
        fetch('/api/tasks')
            .then(response => response.json())
            .then(tasks => {
                const taskList = document.getElementById('task-list');
                taskList.innerHTML = '';  // Clear the list before adding new items

                // Mapping task status to background color class
                const statusColorMap = {
                    'Pending': 'background-color: rgba(240, 240, 240, 0.3);',     // Pending
                    'In Progress': 'background-color: rgba(173, 216, 230, 0.2);',   // In Progress
                    'Completed': 'background-color: rgba(144, 238, 144, 0.2);',   // Completed
                    // add more status to color mappings here as needed
                };

                if (tasks.length === 0) {
                    taskList.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center">
                                <div class="alert alert-info" role="alert">
                                    <h4 class="alert-heading">No Tasks Found!</h4>
                                    <p>You don't have any tasks at the moment. Take a break or add a new task to get started!</p>
                                    <hr>
                                    <p class="mb-0">Click on the 'Add Task' button to create your first task.</p>
                                </div>
                            </td>
                        </tr>
                    `;
                } else {
                    tasks.forEach(task => {
                        const formattedDueDate = new Date(task.dueDate).toISOString().split('T')[0];

                        // Get the class for the task's status using the mapping
                        const rowStyle = statusColorMap[task.status] || ''; // Default to empty if status not found in map

                        taskList.innerHTML += `
                            <tr style="${rowStyle}">
                                <td>${task.title}</td>
                                <td>${task.status}</td>
                                <td>${task.description}</td>
                                <td>${formattedDueDate}</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="editTask(${task.id})">Edit</button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteTask(${task.id})">Delete</button>
                                </td>
                            </tr>
                        `;
                    });
                }
            });
    }


    // Add/Edit Task
    let editingTaskId = null; // To track if a task is being edited
    document.getElementById('task-form').addEventListener('submit', function (e) {
        e.preventDefault();

        const taskData = {
            title: document.getElementById('task-title').value,
            description: document.getElementById('task-description').value,
            status: parseInt(document.getElementById('task-status').value), // New status field
            dueDate: document.getElementById('task-due-date').value
        };

        if (editingTaskId) {
            taskData.id = editingTaskId;

            // If editing, update the existing task
            fetch(`/api/tasks/${editingTaskId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(taskData)
            })
            .then(() => {
                fetchTasks();  // Reload tasks
                resetForm();   // Reset the form for adding new tasks
            });




        } else {
            // Add a new task
            fetch('/api/tasks', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(taskData) })
            .then(() => {
                alert(JSON.stringify(taskData));
                console.log(JSON.stringify(taskData))
                fetchTasks();  // Reload tasks
                resetForm();   // Reset the form
            });
        }
    });



    //-- called when WE click the edited button,-- this populates the form with the taskData and sets the variable

    function editTask(id) {
        fetch(`/api/tasks/${id}`)
            .then(response => response.json())
            .then(task => {
                // Format the due date
                const dueDate = new Date(task.dueDate);
                const formattedDate = dueDate.toISOString().split('T')[0];

                // Populate the form
                document.getElementById('task-title').value = task.title;
                document.getElementById('task-description').value = task.description;
                document.getElementById('task-due-date').value = formattedDate;
                document.getElementById('task-status').value = task.status;

                // Change form header and button text
                document.getElementById('form-header').textContent = 'Edit Task';
                document.querySelector('button[type="submit"]').textContent = 'Update Task';

                // Store the task ID for later use in the submit handler
                editingTaskId = id;
            });
    }


    // Delete task
    function deleteTask(id) {
        fetch(`/api/tasks/${id}`, {
            method: 'DELETE'
        })
        .then(() => {
            fetchTasks();  // Reload tasks
        });
    }


    // Resetting the form values
    function resetForm() {
        document.getElementById('task-title').value = '';
        document.getElementById('task-description').value = '';
        document.getElementById('task-due-date').value = '';
        document.getElementById('form-header').textContent = 'Add New Task';
        document.querySelector('button[type="submit"]').textContent = 'Add Task';
        editingTaskId = null;  // Clear the task being edited
    }
    // Initial task list fetch
    fetchTasks();
</script>